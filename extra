Basic JavaScript
NPM
Basic NodeJS(in built)(Os,file,http)
NodeJS(full Stack App) (Node-EJS-Mongo-Express)
Third Party Api 
Redis
MongoDb Basic
Api with NodeJS(Rest)
DashBoard(Crud)
Email With Node(Sendgrid)
Oauth(with github)
OO_NodeJs
NodeJs with postgres
Login/Logout(JWT)
GraphQl API
Testing
ChatApp
------
Production Pm2
-----------
Nginx
Docker

///
expressRouter
static Data

package.json
/////////
Step to create package.json
//////////////
**NodeJs must be installed

> Navigate to thr folder where you want to generate
   USING  CMD/Terminal
> npm init
> answer all questions
> type "yes"


Local Dependency 
>


Global Dependency>> 
> Only at time development
> create the app first app
> Need admin access to install


/////////
Install Local Dependency
//////////////
> Navigate to thr folder where you want to install
package 
> npm install packagename/ npm i packagename


/////////
Install Global Dependency
//////////////
#Win
> Open cmd as admin 
> npm i -g nodemon


#mac/linux
>Open Terminal
>sudo npm i -g nodemon

/////CD//////
npm i -g nodemon


echo 'export PORT='9900'>dev.env
source ./dev.env

EJS
PUG
Swig
HandleBar
Vash



function add(a,b){
   return a+b
}


add(1,2)

SQl        NoSql
Database   Database
Table      Collections
Row        Document

sno english  hindi
1              80
2     80
3              80


[
   {
      sno:1,
      english:80
   },
    {
      sno:2,
      hindi:80
   },
    {
    
    1. Redshift Cluster: First, you need to create a Redshift cluster. To do
this, navigate to the Amazon Redshift console and follow these steps:
a. Click &quot;Create cluster&quot;.
b. Choose a cluster type, node type, number of nodes, and other
configuration options that meet your needs.
c. Configure the cluster&#39;s network settings, such as VPC, subnets,
and security groups. Make sure to take note of the VPC and security
group IDs.
d. Review the configuration and launch the cluster.
2. Redshift Database: Once the cluster is created, you need to create a
database on the cluster. To do this, navigate to the Redshift console
and follow these steps:
a. Select the cluster you just created.
b. Click &quot;Query editor&quot; and enter your master user credentials.
c. Enter a SQL statement to create a database, such as: CREATE DATABASE
mydatabase;
d. Click &quot;Run&quot;.
3. Redshift IAM Role: You also need to create an IAM role that
QuickSight can assume to access the Redshift cluster. To do this,
follow these steps:
a. Navigate to the IAM console and click &quot;Roles&quot;.
b. Click &quot;Create role&quot;.
c. Select &quot;AWS service&quot; as the trusted entity and &quot;Redshift&quot; as the
service that will use this role.
d. Choose &quot;Redshift - Customizable&quot; as the use case for the role.
e. Attach policies that allow the role to access the Redshift cluster
and database. For example, you can attach the
&quot;AmazonRedshiftFullAccess&quot; policy.
f. Click &quot;Create role&quot;.
4. QuickSight VPC Connection: Next, you need to create a VPC
connection in QuickSight that uses the VPC and security group
associated with the Redshift cluster. To do this, follow these steps:
a. Navigate to the QuickSight console and click &quot;Manage data&quot;.
b. Click &quot;New data set&quot; and select &quot;Redshift&quot;.
c. Select &quot;Use VPC Connection&quot; and click &quot;Create Connection&quot;.
d. Enter a name for the connection.
e. Select the VPC and two subnets that are associated with the
Redshift cluster.
f. Select the security group that allows inbound traffic from
QuickSight&#39;s IP address range.
g. Specify the IAM role that QuickSight should assume to access the
Redshift cluster.
h. Click &quot;Create VPC Connection&quot;.

5. QuickSight Data Set: Once the VPC connection is created, you can
create a data set that uses the Redshift database as a source. To do
this, follow these steps:
a. Navigate to the QuickSight console and click &quot;Manage data&quot;.
b. Click &quot;New data set&quot; and select &quot;Redshift&quot;.
c. Select the VPC connection you just created.
d. Enter the database name, database user credentials, and SQL
query that defines the data set.
e. Click &quot;Validate Connection&quot; to verify that the connection works.
f. Click &quot;Create data source&quot;.
6. QuickSight Analysis: Finally, you can create an analysis that uses the
data set as a source. To do this, follow these steps:
a. Navigate to the QuickSight console and click &quot;Create analysis&quot;.
b. Select the data set you just created as the source.
c. Add fields and create visualizations to analyze
      sno:3,
      hindi:80
   }
]

---------------
Install mongodb

Window
> C:\data\db


Mac
sudo mkdir /System/Volumes/Data/data/db

linux
sudo mkdir /data/db

Window
C:/data/db

How to run mongodb
> Open two terminal 
    1> Mongo server (should alawys running)
    2> Mongo console ( To test query)

Use cmd and naviagte
> C:/Program/Mongo/3.4/bin
> mongod  (mongodb server)

>Use cmd and naviagte
> C:Program/Mongo/4.2/bin
> mongod (to start server)
> mongo (to connect with console)

Mac
> Open Terminal
> sudo mongod --dbpath /System/Volumes/Data/data/db
> Open Terminal
> mongo

linux
> Open Terminal
> sudo mongod --dbpath /data/db
> Open Terminal
> mongo---------------
Install mongodb

Window
> C:\data\db


Mac
sudo mkdir /System/Volumes/Data/data/db

linux
sudo mkdir /data/db

Window
C:/data/db

How to run mongodb
> Open two terminal 
    1> Mongo server (should alawys running)
    2> Mongo console ( To test query)

Use cmd and naviagte
> C:/Program/Mongo/3.4/bin
> mongod  (mongodb server)

>Use cmd and naviagte
> C:Program/Mongo/4.2/bin
> mongod (to start server)
> mongo (to connect with console)

Mac
> Open Terminal
> sudo mongod --dbpath /System/Volumes/Data/data/db
> Open Terminal
> mongo

linux
> Open Terminal
> sudo mongod --dbpath /data/db
> Open Terminal
> mongo

show dbs
use nareshit
show collections

db.zomato.find()
db.zomato.find({id:"19070793"}).pretty()
db.zomato.find({aggregate_rating:{$lt:'4.4'},city:'Delhi'})

db.zomato.find({aggregate_rating:{$lt:'4.4'},city:'Delhi'},{name:1,min_price:1})

db.zomato.find({aggregate_rating:{$lt:'4.4'},city:'Delhi'},{name:1,min_price:1,_id:0}).sort({aggregate_rating:1})


db.test.insert({"name":"abc"})

db.test.insertMany([{},{},{}])
